local rendercam = require "rendercam.rendercam"

local MOVEMENT_SPEED = 300

go.property("is_paused", false)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "camera_init")

	self.input = vmath.vector3()
	self.correction = vmath.vector3()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.is_paused == false then
		local pos = go.get_position()
		local input = self.input
		if vmath.length_sqr(self.input) > 1 then
			input = vmath.normalize(self.input)
		end
		go.set_position(pos + (input * MOVEMENT_SPEED * dt))
	end

	self.input.x = 0
	self.input.y = 0
	self.correction.x = 0
	self.correction.y = 0
end

function on_message(self, message_id, message, sender)
	print("player message received", message_id)
	if message_id == hash("camera_init") then
		rendercam.follow(go.get_id())
	elseif message_id == hash("contact_point_response") then
		-- https://www.defold.com/manuals/physics/
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed then
		factory.create('/bullets#weapon_1_bullet', go.get_position(), nil, nil, 0.5)
	elseif action_id == hash('up') then
		self.input.y = 1
	elseif action_id == hash('down') then
		self.input.y = -1
	elseif action_id == hash('right') then
		self.input.x = 1
	elseif action_id == hash('left') then
		self.input.x = -1
	elseif action_id == nil then
		local pos = go.get_position()
		local mouse_pos = rendercam.screen_to_world_2d(action.x, action.y)
		local rad = math.atan2(mouse_pos.y - pos.y, mouse_pos.x - pos.x)
		local rot = vmath.quat_rotation_z(rad)
		go.set_rotation(rot)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
